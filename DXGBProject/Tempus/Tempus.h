////////////////////////////// //////////////////////////////
//	プロジェクト	：TATRA-Library
//	ファイル名		：Tempus.h
//	開発環境		：MSVC++ 2008
//	最適タブ数		：4
//	担当者			：鴫原 徹
//	内包ﾃﾞｰﾀと備考	：時間関係の関数
//					▼
//	namespace wiz;
//		class Tempus ;
//		class Tempus2 ;
//
#pragma once
namespace TLIB{
#define DWMSTOFS( DW ) ((float)(DW) / 1000.0f)/*Dword miri second to float Second*/
#define MSTOS( DW )    ((DW) * 1000.0f)
/**************************************************************************
 class Tempus;
 用途: 時間クラス
****************************************************************************/
class Tempus
{
	static DWORD m_dwStartGameTime;		//	: 実行ファイルが起動した時のシステムミリ秒
	static DWORD m_dwFrameAccumulator ;	//	: 起動からの経過フレーム数
	static DWORD m_dwOFOTime ;			//	: 前フレームのクロック時間
	static DWORD m_dwElapsedTime;		//	: １フレームにかかった時間
	static DWORD m_dwFixFpsTime ;		//	: フレーム処理の規制時間

	static float m_fOneSecondCounter;
	static bool  m_bOneSecondSignal;

	static float m_fFps;				//	: FPS
	static DWORD m_dwFFA;				//	: FPS計算用にフレーム数を蓄積する
	static DWORD m_dwLFT;				//	: 最後にFPSを計算してからの時間
//::::: 拾い物 :::::://
	static void	Fps_Calculation();
public:
/**************************************************************************
 関数名: Tempus::Tempus();
 用途: コンストラクタ
 戻り値: なし
****************************************************************************/
	Tempus(void);
/**************************************************************************
 関数名: Tempus::~Tempus();
 用途: デストラクタ
 戻り値: なし
****************************************************************************/
	~Tempus(void);

/**************************************************************************
 関数名: void  Tempus::TimeUpdate();
 用途: 時間の更新
 戻り値: なし
****************************************************************************/
	static void    TimeUpdate();		//	: 時間を更新
/**************************************************************************
 関数名: DWORD Tempus::TimeGetTime();
 用途: 起動からの経過時間を返す
 戻り値: 起動からの経過時間(㍉秒)
****************************************************************************/
	static DWORD   TimeGetTime();		//	: 実行ファイル駆動からの経過時間
/**************************************************************************
 関数名: double Tempus::getWorkTime();
 用途: 起動からの経過時間(TimeUpdate時現在)
 戻り値: 起動からの経過時間(秒)
****************************************************************************/
	static double  getWorkTime();		//	: 起動からの経過時間
/**************************************************************************
 関数名: double Tempus::getElapsedTime();
 用途: １フレームの経過時間を返す
 戻り値: 経過時間(秒)
****************************************************************************/
	static double  getElapsedTime();	//	: 1フレームの経過時間を獲得
/**************************************************************************
 関数名: double Tempus::getClockSec();
 用途: 秒の獲得
 戻り値: 秒
****************************************************************************/
	static double  getFps();			//	: FPSの獲得
/**************************************************************************
 関数名: double Tempus::getFps();
 用途: フレームレートの計算
 戻り値: フレームレート
****************************************************************************/
	static double  getClockSec();		//	: 秒の獲得
/**************************************************************************
 関数名: double Tempus::getClock();
 用途: clock()
 戻り値: clock()
****************************************************************************/
	static clock_t getClock();			//	: くろっく<-
/**************************************************************************
 関数名: bool OneSecondSignal();
 用途: 一秒シグナル
 戻り値: 一秒シグナル
****************************************************************************/
	static bool OneSecondSignal();
	//static void  FixedFPS(int i_iFPS);
};
/**************************************************************************
 class Tempus2;
 用途: 時間クラス
****************************************************************************/
class Tempus2
{
	DWORD m_dwStartGameTime;		//	: 実行ファイルが起動した時のシステムミリ秒
	DWORD m_dwFrameAccumulator ;	//	: 起動からの経過フレーム数
	DWORD m_dwOFOTime ;				//	: 前フレームのクロック時間
	DWORD m_dwElapsedTime;			//	: １フレームにかかった時間
	DWORD m_dwFixFpsTime ;			//	: フレーム処理の規制時間

	float m_fOneSecondCounter;
	bool  m_bOneSecondSignal;

	float m_fFps;					//	: FPS
	DWORD m_dwFFA;					//	: FPS計算用にフレーム数を蓄積する
	DWORD m_dwLFT;					//	: 最後にFPSを計算してからの時間
//::::: 拾い物 :::::://
	void	Fps_Calculation();
public:
/**************************************************************************
 関数名: Tempus2::Tempus2();
 用途: コンストラクタ
 戻り値: なし
****************************************************************************/
	Tempus2(void);
/**************************************************************************
 関数名: Tempus2::~Tempus2();
 用途: デストラクタ
 戻り値: なし
****************************************************************************/
	~Tempus2(void);

/**************************************************************************
 関数名: void  Tempus2::TimeUpdate();
 用途: 時間の更新
 戻り値: なし
****************************************************************************/
	void    TimeUpdate();		//	: 時間を更新
/**************************************************************************
 関数名: DWORD Tempus2::TimeGetTime();
 用途: 起動からの経過時間を返す
 戻り値: 起動からの経過時間(㍉秒)
****************************************************************************/
	DWORD   TimeGetTime();		//	: 実行ファイル駆動からの経過時間
/**************************************************************************
 関数名: double Tempus2::getWorkTime();
 用途: 起動からの経過時間(TimeUpdate時現在)
 戻り値: 起動からの経過時間(秒)
****************************************************************************/
	double  getWorkTime();		//	: 起動からの経過時間
/**************************************************************************
 関数名: double Tempus::getWorkTime();
 用途: １フレームの経過時間を返す
 戻り値: 経過時間(秒)
****************************************************************************/
DWORD getWorkFrame();
/**************************************************************************
 関数名: double Tempus2::getElapsedTime();
 用途: １フレームの経過時間を返す
 戻り値: 経過時間(秒)
****************************************************************************/
	double  getElapsedTime();	//	: 1フレームの経過時間を獲得
/**************************************************************************
 関数名: double Tempus2::getClockSec();
 用途: 秒の獲得
 戻り値: 秒
****************************************************************************/
	double  getFps();			//	: FPSの獲得
/**************************************************************************
 関数名: double Tempus2::getFps();
 用途: フレームレートの計算
 戻り値: フレームレート
****************************************************************************/
	double  getClockSec();		//	: 秒の獲得
/**************************************************************************
 関数名: double Tempus2::getClock();
 用途: clock()
 戻り値: clock()
****************************************************************************/
	clock_t getClock();			//	: くろっく<-
/**************************************************************************
 関数名: bool OneSecondSignal();
 用途: 一秒シグナル
 戻り値: 一秒シグナル
****************************************************************************/
	bool OneSecondSignal();
	//static void  FixedFPS(int i_iFPS);
};
}