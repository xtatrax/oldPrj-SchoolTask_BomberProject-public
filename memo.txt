

便利なツール
	・OnePushDelete.exe
		ルートフォルダに入っているこのファイルを実行すると余計なファイルを自動的に削除してくれます
		余計なものまで消えちゃっても責任は負えないので自己責任でつかってちょっ




Debug機能

・プログラム実行中の機能
	・プログラム全体の機能

		プログラムの実行中に以下のキーを押すと各種機能を利用できます

		●F12 一時停止
		●F11 スロー(1FPS化)
		●F9  デバッグ文字列をファイルへ出力
		●F8  newされた領域をファイルへ出力 ← 画面上に情報できるように改良中

・関数
	・画面上に簡易的に文字列を描画する

		Debugger::DBGSTR::addStr( const wchar_t* addStr , ... )     関数
		Debugger::DBGSTR::addStrTop( const wchar_t* addStr , ... )  関数
		
		addStr()関数は一番最後に文字列を追加します
		addStrTop()関数は一番最初に文字列を追加します
		使い方は printf()関数とほとんど同じになっています
		
		例)
		DBGSTR::addStr( " 追加したい文字列 %d" , foo );
		
	
	・ログファイルを出力する
	
		Debugger::DBGWRITINGLOGTEXT::addStr( const char* addStr , ... )  関数
		Debugger::DBGWRITINGLOGTEXT::addStrToFile( const wstring FileName , const wchar_t* addStr , ...)  関数
	  
	  
		addStr()関数はデフォルトのログファイル"./LogDatas/LogData.txt"へログの書き出しができます。
		addStrToFile()関数は第一引数に指定したファイルに書き出しを行います
		使い方は printf()関数とほとんど同じになっています
	  
		例)
		if(  PushKEY  ){
			DBGWRITINGLOGTEXT::addStr( "フー : %d" , foo );
		}
		

必要なクラス / 関数

	・磁石クラス
		└ 磁界範囲描画()

	// たいようさん
	・初期配置磁界用のクラス			( MagneticumObjectクラスから派生させてください
		・初期配置磁界の管理クラス		( 上記クラスを コンテナ管理するクラス

	// 
	・プレイヤー配置磁界クラス
	
	// 
	・コイルクラス

	// 
	・スタート範囲クラス
	

	// たななん
	・壁の管理クラス
		└壊せる/壊せないフラグ
	
	// りょーくん
	・アイテムクラス
		・ゲージクラス
	
	// ばるるん
	・エネミークラス
	
	// 
	・チェックポイント
	
	// 
	・全体マップクラス

	// 
	・軌道先読みクラス
	
	//
	＊UI周り
	

やること

	
	・一時オグジェクトの3D化
	
	// さいとん
	・ステージの仮配置
	
	・・ステージデータの外部ファイル化
	
	
	